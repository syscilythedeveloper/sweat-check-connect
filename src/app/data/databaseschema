-- Core User Management
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    bio TEXT,
    profile_image_url TEXT,
    date_of_birth DATE,
    fitness_level VARCHAR(20) CHECK (fitness_level IN ('beginner', 'intermediate', 'advanced')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT true
);

-- User Following System
CREATE TABLE user_follows (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    follower_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    following_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(follower_id, following_id),
    CHECK (follower_id != following_id)
);

-- Challenge System
CREATE TABLE challenges (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(200) NOT NULL,
    description TEXT,
    challenge_type VARCHAR(50) NOT NULL, -- 'steps', 'pushups', 'distance', 'weight_loss', 'custom'
    target_value INTEGER, -- target number (steps, reps, etc.)
    target_unit VARCHAR(20), -- 'steps', 'reps', 'kg', 'miles', etc.
    duration_days INTEGER NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    created_by UUID NOT NULL REFERENCES users(id),
    is_public BOOLEAN DEFAULT true,
    max_participants INTEGER, -- NULL = unlimited
    difficulty_level VARCHAR(20) CHECK (difficulty_level IN ('easy', 'medium', 'hard')),
    reward_points INTEGER DEFAULT 0,
    image_url TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Many-to-Many: Users participating in Challenges
CREATE TABLE challenge_participants (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    challenge_id UUID NOT NULL REFERENCES challenges(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    current_progress INTEGER DEFAULT 0,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_completed BOOLEAN DEFAULT false,
    completed_at TIMESTAMP,
    final_score INTEGER,
    rank INTEGER, -- final ranking in challenge
    UNIQUE(challenge_id, user_id)
);

-- Daily Progress Tracking
CREATE TABLE challenge_progress (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    participant_id UUID NOT NULL REFERENCES challenge_participants(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    daily_value INTEGER NOT NULL, -- daily progress amount
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(participant_id, date)
);

-- Workout Plans and Sessions
CREATE TABLE workout_plans (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    difficulty_level VARCHAR(20),
    estimated_duration_minutes INTEGER,
    muscle_groups TEXT[], -- array of muscle groups
    equipment_needed TEXT[],
    is_public BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE workout_exercises (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    workout_plan_id UUID NOT NULL REFERENCES workout_plans(id) ON DELETE CASCADE,
    exercise_name VARCHAR(200) NOT NULL,
    sets INTEGER,
    reps INTEGER,
    weight_kg DECIMAL(5,2),
    duration_seconds INTEGER,
    rest_seconds INTEGER,
    order_index INTEGER NOT NULL,
    notes TEXT
);

-- Workout Sessions (actual completed workouts)
CREATE TABLE workout_sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    workout_plan_id UUID REFERENCES workout_plans(id), -- NULL if custom workout
    session_name VARCHAR(200),
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP,
    total_calories_burned INTEGER,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE session_exercises (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id UUID NOT NULL REFERENCES workout_sessions(id) ON DELETE CASCADE,
    exercise_name VARCHAR(200) NOT NULL,
    sets_completed INTEGER,
    reps_completed INTEGER,
    weight_used_kg DECIMAL(5,2),
    duration_seconds INTEGER,
    calories_burned INTEGER,
    order_index INTEGER
);

-- Meal Plans and Nutrition
CREATE TABLE meal_plans (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    total_calories INTEGER,
    total_protein_g DECIMAL(6,2),
    total_carbs_g DECIMAL(6,2),
    total_fat_g DECIMAL(6,2),
    meal_count INTEGER,
    is_public BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE meals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    meal_plan_id UUID NOT NULL REFERENCES meal_plans(id) ON DELETE CASCADE,
    meal_type VARCHAR(50) NOT NULL, -- 'breakfast', 'lunch', 'dinner', 'snack'
    name VARCHAR(200) NOT NULL,
    calories INTEGER,
    protein_g DECIMAL(6,2),
    carbs_g DECIMAL(6,2),
    fat_g DECIMAL(6,2),
    ingredients TEXT[],
    instructions TEXT,
    prep_time_minutes INTEGER,
    image_url TEXT,
    order_index INTEGER
);

-- Social Media Posts
CREATE TABLE posts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    post_type VARCHAR(50) NOT NULL, -- 'workout', 'meal', 'challenge_update', 'playlist', 'general'
    title VARCHAR(200),
    content TEXT,
    image_urls TEXT[],
    workout_session_id UUID REFERENCES workout_sessions(id),
    meal_plan_id UUID REFERENCES meal_plans(id),
    challenge_id UUID REFERENCES challenges(id),
    spotify_playlist_id VARCHAR(100), -- Spotify playlist ID
    visibility VARCHAR(20) DEFAULT 'public' CHECK (visibility IN ('public', 'followers', 'private')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Post Interactions
CREATE TABLE post_likes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    post_id UUID NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(post_id, user_id)
);

CREATE TABLE post_comments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    post_id UUID NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    parent_comment_id UUID REFERENCES post_comments(id), -- for nested comments
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User Achievements and Badges
CREATE TABLE achievements (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(200) NOT NULL,
    description TEXT,
    badge_icon_url TEXT,
    achievement_type VARCHAR(50), -- 'challenge_completion', 'streak', 'milestone', 'social'
    criteria JSONB, -- flexible criteria storage
    points_reward INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_achievements (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    achievement_id UUID NOT NULL REFERENCES achievements(id) ON DELETE CASCADE,
    earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    challenge_id UUID REFERENCES challenges(id), -- if earned through challenge
    UNIQUE(user_id, achievement_id)
);

-- Spotify Integration
CREATE TABLE user_playlists (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    spotify_playlist_id VARCHAR(100) NOT NULL,
    playlist_name VARCHAR(200),
    playlist_description TEXT,
    track_count INTEGER,
    total_duration_ms BIGINT,
    is_public BOOLEAN DEFAULT true,
    workout_type VARCHAR(50), -- 'cardio', 'strength', 'yoga', etc.
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- AI Recommendations and Interactions
CREATE TABLE ai_recommendations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    recommendation_type VARCHAR(50), -- 'workout', 'meal', 'challenge', 'rest_day'
    title VARCHAR(200),
    content TEXT,
    metadata JSONB, -- flexible storage for recommendation data
    is_dismissed BOOLEAN DEFAULT false,
    is_accepted BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP
);

-- Daily Check-ins and Streaks
CREATE TABLE daily_checkins (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    checkin_date DATE NOT NULL,
    checkin_type VARCHAR(50) NOT NULL, -- 'workout', 'meal_log', 'weight_update', 'general', 'challenge_progress'
    content TEXT, -- optional note/description
    workout_session_id UUID REFERENCES workout_sessions(id),
    challenge_progress_id UUID REFERENCES challenge_progress(id),
    meal_plan_id UUID REFERENCES meal_plans(id),
    weight_kg DECIMAL(5,2), -- if weight check-in
    mood_rating INTEGER CHECK (mood_rating >= 1 AND mood_rating <= 5), -- 1-5 mood scale
    energy_level INTEGER CHECK (energy_level >= 1 AND energy_level <= 5), -- 1-5 energy scale
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, checkin_date, checkin_type) -- prevent duplicate checkins of same type per day
);

-- User Streaks Tracking
CREATE TABLE user_streaks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    streak_type VARCHAR(50) NOT NULL, -- 'daily_checkin', 'workout', 'challenge_participation', 'meal_logging'
    current_streak INTEGER DEFAULT 0,
    longest_streak INTEGER DEFAULT 0,
    last_activity_date DATE,
    streak_start_date DATE,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, streak_type)
);

-- Streak Milestones and Rewards
CREATE TABLE streak_milestones (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    streak_type VARCHAR(50) NOT NULL,
    milestone_days INTEGER NOT NULL, -- 7, 30, 100, 365, etc.
    title VARCHAR(200) NOT NULL, -- "Week Warrior", "Monthly Master", etc.
    description TEXT,
    badge_icon_url TEXT,
    reward_points INTEGER DEFAULT 0,
    reward_badge_id UUID REFERENCES achievements(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(streak_type, milestone_days)
);

-- User Earned Streak Milestones
CREATE TABLE user_streak_milestones (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    milestone_id UUID NOT NULL REFERENCES streak_milestones(id) ON DELETE CASCADE,
    earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    streak_length_achieved INTEGER NOT NULL,
    UNIQUE(user_id, milestone_id)
);

-- Daily Goals and Targets
CREATE TABLE daily_goals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    goal_type VARCHAR(50) NOT NULL, -- 'steps', 'water_intake', 'workout_minutes', 'calories_burned'
    target_value INTEGER NOT NULL,
    target_unit VARCHAR(20) NOT NULL, -- 'steps', 'ml', 'minutes', 'calories'
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, goal_type)
);

-- Daily Goal Progress
CREATE TABLE daily_goal_progress (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    goal_id UUID NOT NULL REFERENCES daily_goals(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    current_value INTEGER DEFAULT 0,
    is_completed BOOLEAN DEFAULT false,
    completed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(goal_id, date)
);

-- Gamification: Points and Levels
CREATE TABLE user_points (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    total_points INTEGER DEFAULT 0,
    points_this_week INTEGER DEFAULT 0,
    points_this_month INTEGER DEFAULT 0,
    current_level INTEGER DEFAULT 1,
    points_to_next_level INTEGER DEFAULT 100,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id)
);

-- Point Transactions (for tracking how points were earned)
CREATE TABLE point_transactions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    points_change INTEGER NOT NULL, -- can be positive or negative
    transaction_type VARCHAR(50) NOT NULL, -- 'daily_checkin', 'streak_milestone', 'challenge_complete', 'workout_log'
    description TEXT,
    reference_id UUID, -- can reference checkin, challenge, etc.
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Streak Freeze/Shield (like Duolingo)
CREATE TABLE streak_shields (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    shield_type VARCHAR(50) NOT NULL, -- 'freeze', 'weekend_pause', 'sick_day'
    shields_available INTEGER DEFAULT 0,
    shields_used_this_month INTEGER DEFAULT 0,
    last_used_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, shield_type)
);

-- User Settings and Preferences
CREATE TABLE user_settings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    notification_challenges BOOLEAN DEFAULT true,
    notification_followers BOOLEAN DEFAULT true,
    notification_likes BOOLEAN DEFAULT true,
    notification_comments BOOLEAN DEFAULT true,
    notification_streak_reminder BOOLEAN DEFAULT true,
    notification_daily_goals BOOLEAN DEFAULT true,
    streak_reminder_time TIME DEFAULT '09:00:00', -- when to send streak reminders
    privacy_profile VARCHAR(20) DEFAULT 'public',
    privacy_workouts VARCHAR(20) DEFAULT 'public',
    privacy_challenges VARCHAR(20) DEFAULT 'public',
    preferred_units VARCHAR(20) DEFAULT 'metric', -- 'metric' or 'imperial'
    timezone VARCHAR(50) DEFAULT 'UTC',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id)
);

-- Indexes for Performance
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_user_follows_follower ON user_follows(follower_id);
CREATE INDEX idx_user_follows_following ON user_follows(following_id);
CREATE INDEX idx_challenges_start_date ON challenges(start_date);
CREATE INDEX idx_challenges_end_date ON challenges(end_date);
CREATE INDEX idx_challenges_created_by ON challenges(created_by);
CREATE INDEX idx_challenge_participants_challenge ON challenge_participants(challenge_id);
CREATE INDEX idx_challenge_participants_user ON challenge_participants(user_id);
CREATE INDEX idx_challenge_progress_participant ON challenge_progress(participant_id);
CREATE INDEX idx_challenge_progress_date ON challenge_progress(date);
CREATE INDEX idx_posts_user_created ON posts(user_id, created_at DESC);
CREATE INDEX idx_posts_created_at ON posts(created_at DESC);
CREATE INDEX idx_post_likes_post ON post_likes(post_id);
CREATE INDEX idx_post_comments_post ON post_comments(post_id);
CREATE INDEX idx_workout_sessions_user_start ON workout_sessions(user_id, start_time DESC);
CREATE INDEX idx_meal_plans_user ON meal_plans(user_id);
CREATE INDEX idx_user_achievements_user ON user_achievements(user_id);
CREATE INDEX idx_ai_recommendations_user_created ON ai_recommendations(user_id, created_at DESC);

-- New indexes for streak and gamification features
CREATE INDEX idx_daily_checkins_user_date ON daily_checkins(user_id, checkin_date DESC);
CREATE INDEX idx_daily_checkins_date ON daily_checkins(checkin_date);
CREATE INDEX idx_user_streaks_user_type ON user_streaks(user_id, streak_type);
CREATE INDEX idx_user_streaks_active ON user_streaks(is_active, current_streak DESC);
CREATE INDEX idx_daily_goal_progress_goal_date ON daily_goal_progress(goal_id, date);
CREATE INDEX idx_point_transactions_user_created ON point_transactions(user_id, created_at DESC);
CREATE INDEX idx_user_points_total ON user_points(total_points DESC);
CREATE INDEX idx_streak_milestones_type_days ON streak_milestones(streak_type, milestone_days);